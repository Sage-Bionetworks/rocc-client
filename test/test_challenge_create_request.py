# coding: utf-8

"""
    Registry of Open Community Challenge API

    The OpenAPI specification implemented by the Challenge Registries. # Introduction TBA   # noqa: E501

    The version of the OpenAPI document: 0.1.4
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import roccclient
from roccclient.models.challenge_create_request import ChallengeCreateRequest  # noqa: E501
from roccclient.rest import ApiException

class TestChallengeCreateRequest(unittest.TestCase):
    """ChallengeCreateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ChallengeCreateRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = roccclient.models.challenge_create_request.ChallengeCreateRequest()  # noqa: E501
        if include_optional :
            return ChallengeCreateRequest(
                name = '0', 
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                url = '0', 
                status = 'open', 
                tags = [
                    'awesome-tag'
                    ], 
                challenge_results = roccclient.models.challenge_results.ChallengeResults(
                    n_submissions = 0, 
                    n_final_submissions = 0, 
                    n_registered_participants = 0, ), 
                organizers = [
                    '507f1f77bcf86cd799439011'
                    ]
            )
        else :
            return ChallengeCreateRequest(
                name = '0',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                status = 'open',
        )

    def testChallengeCreateRequest(self):
        """Test ChallengeCreateRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
